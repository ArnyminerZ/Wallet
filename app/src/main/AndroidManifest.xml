<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.Material3.DayNight.NoActionBar"
        android:name=".App"
        tools:ignore="UnusedAttribute">
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>

            <!--
             Capture content by MIME type, which is how Gmail broadcasts
             attachment open requests.  pathPattern and file extensions
             are ignored, so the MIME type *MUST* be explicit, otherwise
             we will match absolutely every file opened.
            -->
            <intent-filter
                android:icon="@mipmap/ic_launcher_round"
                android:label="@string/app_name"
                android:priority="50" >
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.BROWSABLE" />
                <category android:name="android.intent.category.DEFAULT" />

                <data android:scheme="file" />
                <data android:scheme="content" />
                <data android:mimeType="application/vnd.apple.pkpass" />
            </intent-filter>

            <!--
             Capture file open requests (pathPattern is honoured) where no
             MIME type is provided in the Intent.  An Intent with a null
             MIME type will never be matched by a filter with a set MIME
             type, so we need a second intent-filter if we wish to also
             match files with this extension and a non-null MIME type
             (even if it is non-null but zero length).
            -->
            <intent-filter
                android:icon="@mipmap/ic_launcher_round"
                android:label="@string/app_name"
                android:priority="50" >
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.BROWSABLE" />
                <category android:name="android.intent.category.DEFAULT" />

                <data android:scheme="file" />
                <data android:host="*" />

                <!--
                     Work around Android's ugly primitive PatternMatcher
                     implementation that can't cope with finding a . early in
                     the path unless it's explicitly matched.
                -->
                <data android:pathPattern=".*\\.pkpass" />
                <data android:pathPattern=".*\\..*\\.pkpass" />
                <data android:pathPattern=".*\\..*\\..*\\.pkpass" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\.pkpass" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\.pkpass" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\..*\\.pkpass" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\..*\\..*\\.pkpass" />
            </intent-filter>

            <!--
             Capture file open requests (pathPattern is honoured) where a
             (possibly blank) MIME type is provided in the Intent.  This
             filter may only be necessary for supporting ES File Explorer,
             which has the probably buggy behaviour of using an Intent
             with a MIME type that is set but zero-length.  It's
             impossible to match such a type except by using a global
             wildcard.
            -->
            <intent-filter
                android:icon="@mipmap/ic_launcher_round"
                android:label="@string/app_name"
                android:priority="50" >
                <action android:name="android.intent.action.VIEW" />

                <category android:name="android.intent.category.BROWSABLE" />
                <category android:name="android.intent.category.DEFAULT" />

                <data android:scheme="file" />
                <data android:host="*" />
                <data android:mimeType="*/*" />

                <!--
                 Work around Android's ugly primitive PatternMatcher
                 implementation that can't cope with finding a . early in
                 the path unless it's explicitly matched.
                -->
                <data android:pathPattern=".*\\.pkpass" />
                <data android:pathPattern=".*\\..*\\.pkpass" />
                <data android:pathPattern=".*\\..*\\..*\\.pkpass" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\.pkpass" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\.pkpass" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\..*\\.pkpass" />
                <data android:pathPattern=".*\\..*\\..*\\..*\\..*\\..*\\..*\\.pkpass" />
            </intent-filter>
        </activity>
    </application>

</manifest>